{
  "_get": {
    "/bloggs?limit=10": [
      {
        "_req": {},
        "_res": {
          "_body": [
            {
              "id":"123",
              "createdAt": "2021-06-04T15:32:31.000Z",
              "username": "Tim",
              "title": "Starting a robot journey",
              "description": "I run through how I've started making my own robot with a Raspberry Pi.",
              "image": "/assets/title-image-blog-1.png",
              "body": "# Starting a robot journey\n\nI have been wanting to build my own robot for a long time. \n\nOf course I have, I'm an engineer!\n\nIt'll be awesome! Maybe it'll have legs and be able to run around and climb on things and avoid obstacles and squeeze through small gaps and.. and I can make it do things like tidy up the house and pick up litter outside and it'll play with my cat and I won't have to charge it because it'll come back and charge itself and.. and...\n\nWoah! Maybe I'm getting ahead of myself a bit!\n\n## Things we'll need\nOk so first things first. I had an old raspberry pi, so I've bought myself a few bits and bobs to make it into a robot.\n\n### Mk1 parts list:\n - Raspberry pi (Mines a Raspberry pi 3)\n - Raspberry pi camera (We're going to be doing computer vision at some point right? :D :D :D )\n - A basic chassis with two 12v motors and some [treads](/image-server/Treads-compressed.JPG) (Wheels are boring. Give it treads! Give it treads!) (Legs can be on a later model)\n - Breadboard and wires\n - Buck converter (Raspberry pi runs on 5V, my motors prefer 12V)\n - L293D motor controller IC\n - A 3 cell lipo battery (mine is one from a remote control plane I built a few years ago)\n\nHere are my main electronics parts:\n\n<img alt=\"electronics\" src=\"/image-server/electronics-compressed.JPG\" width=200>\n<img alt=\"wires\" src=\"/image-server/wires-compressed.JPG\" width=200>\n<img alt=\"battery\" src=\"/image-server/battery-compressed.JPG\" width=200>\n\nOh and we'll need some tools as well!\n\n### Tools\n - Soldering iron and solder\n - Various screwdrivers\n - Multimeter\n - wire cutters/strippers\n\n![tools](/image-server/tools-compressed.JPG)\n\n## Assembly\nNow to assemble the robot. \n\nFirst I wired up my buck converter across the power rails of my breadboard so that one side could be the battery voltage (approx 11.4V) and the other side would be 5V. This involved soldering some wires to the connectors of my buck converter so that I could plug it into the breadboard. Since my buck converter doesn't have any sort of display I had to use a multimeter to calibrate it to 5V. (You'll need to connect up the battery to do this. Once you've calibrated the buck converter, best disconnect the battery again.)\nI made a connection across the board between the two neutral rails so that there's a common ground. \n\nNext I plugged in the motor controller and started wiring it up.\n\nHere's a diagram showing the pins of the motor controller IC:\n\n![](/image-server/L293D-Ic-Pinout.jpg)\n\nWe'll connect Vcc 1 to our 5V rails and Vcc 2 to the battery voltage, and we will connect all the ground pins to our common ground. We also need to connect both the \"enable\" pins to 5V to enable all the controllers.\n\nWe'll be connecting the 4 input pins to the GPIO pins on the raspberry pi, and the 4 output pins to our motors.\n\nAfter wiring up the Vcc, ground and enable pins as above, I came to attach the motors.\n\nAt this point I realised that I needed to upgrade my chassis a bit so that I could mount all the different parts to it. So I spent a little while fashoning something out of some old ice-cream tubs! So now I have a chassis with three layers to mount my raspberry pi, breadboard and battery onto. I also cut a little mount for the rasberry pi camera, though that won't be wired up quite yet.\n\nI soldered some wires onto the two motors and wired them up to the motor controller outputs. \nFinally I wired up the raspberry pi gpio pins to the 5V rails and the motor controller inputs.\n\nFor the raspberry pi GPIO pins, pins 2 and 4 are +V so they are wired to the 5V rail, and pins 6 and 9 are -V so they are wired to the ground. I'm using pins 11,12,13 and 15 to control the motors.\n\nIf you're trying this at home, be super careful with the raspberry pi pins. If you accidentally wire one of the pins to the 11.4V rails you'll fry the raspberry pi! Raspberry pis are very sensitive so you need to make sure it get exactly 5V, even 5.1V could damage it.\n\nHere's a circuit diagram:\n\n<img src=\"/image-server/circuit-diagram.png\" alt=\"circuit diagram\" width=\"500\">\n\nWith all this complete I mounted all the parts on my makeshift chassis.\n\nAnd here's the MK1 robot!! \n\n![robot mk1](/image-server/robot-mk1.jpg)\n\nBut it doesn't do anything yet! Next I'll start building it a brain!",
              "tags": "robot, robotics, raspberry pi, make, robot journey, electronics"
            },
            {
              "id":"345",
              "createdAt": "2021-08-13T10:28:38.000Z",
              "username": "Tim",
              "title": "Making a Robot Move",
              "description": "Here I start getting down to the job of coding my robot",
              "image": "/assets/title-image-blog-2.png",
              "body": "# Making a robot move!\nSo I now have a little robot made from Ice-cream tubs and various electronics.\n\nBut it doesn't do anything ...yet!\n\nThe brain of my robot is a raspberry pi, but it needs some software to make it move. My first milestone will be to make it move around by remote control over the wifi.\n\n## Getting the raspberry pi set up with wifi\nFirst we need to set up the raspberry pi so we can connect to it via wifi. I'm going to take the pi out of my robot for now until we've got everything set up. We can power it from the standard mains raspberry pi adaptor.\n\nI've loaded up a fresh raspian image on a microSD card. I use a package called Raspberry Pi Imager. \n\n![](/image-server/raspi-imager.bmp)\n\nNext we need to enable wifi on the raspberry pi. This can done a couple of ways. The easiest is probably to connect it up to a screen, mouse and keyboard and do it via the GUI, but I don't have a spare screen with a hdmi interface. :(\n\nSo instead I've connected the pi up to the network with an ethernet cable and I'm going to ssh into it using [Putty](https://www.putty.org/).\n\nSSH is disabled by default on new raspbian images, so I first need to enable it. This can be done by adding a blank file called 'ssh' (no extension) to the root directory on the image.\n\nThen I connect to the pi using putty.\n\n![](/image-server/putty.bmp)\n\nThe login details are:\n- user: pi\n- password: raspberry\n\n![](/image-server/putty-terminal.bmp)\n\nNow we set the wifi details using raspi config.\n\nRun \n```\n$ sudo raspi-config \n```\nIt will open a display that can be navigated using the arrow keys and enter button.\n\n![](/image-server/raspi-config.bmp)\n\nUnder Localisation Options we need to change the country to the country code of where we are. For me that's GB.\n\nUnder System Options we set the set the Wireless Lan ssid and passphrase. (I found mine on the back of my router.)\n\nWith these things set, it's time to try connecting to it via wifi.\n\nI shut it down by running \n```\n$ sudo shutdown -h now\n```\n\nThen I unplugged it from the power and disconnected the ethernet cable. Now I'll plug it in again and see if I could ssh in.\n\n![](/image-server/putty-terminal-with-wifi.bmp)\n\nSweet!\n\n## Some robot code\nOk, time to write some code to control our robot!\n\nI'm going to be coding in python for now, but when we get to some more complex functionality we'll probably work some C++ code in as well!\n\nSo we've got two main things to think about here. The first is how we'll control the robot, and the second is the connection over the wifi. I'm thinking for the connection we'll use websockets and control the robot via a browser. We should make the robot respond to simple string commands that we send across the websocket connection.\n\n### Robot controller\nFor the robot control we'll make a new class called RobotController that receives commands and controls the robot.\n\nThis is fairly simple since there's a nice module that comes with raspberry pi called 'gpiozero' for controlling the GPIO pins. It even provides a class called 'Robot' for this sort of robot, with methods for the various directions. We just need to tell it which GPIO pins we are using.\n\nThe class I've created looks like this.\n```\nclass RobotController:\n    def __init__(self):\n        self.robot = gpiozero.Robot(left=(17,18), right=(22,27))\n\n    def giveCommand(self, command):\n        print(command)\n        if command == \"forward\":\n            self.robot.forward()\n        elif command == \"back\":\n            self.robot.backward()\n        elif command == \"right\":\n            self.robot.right()\n        elif command == \"left\":\n            self.robot.left()\n        elif command == \"stop\":\n            self.robot.stop()\n        else:\n            return \"Command not recognised\"\n        return command\n```\nWe'll be using the 'giveCommand' method with the values received over the websocket. I've chosen to log the command and also return it so we can pass it back across the connection as a confirmation. If we get a command we don't understand we're sending back an error message.\n\n### Websocket connection (robot)\nFor the websocket connection well use the websockets module in python.\n\nThe basic usage of this package can be found here: https://websockets.readthedocs.io/en/stable/intro.html\n\n```\nimport asyncio\nimport websockets\n\nfrom robot_connection.websocket_connection import getControlConnection\nfrom robot_control.robot_control import RobotController\n\ncontroller = RobotController()\nport = 8010\nstart_server = websockets.serve(\n    getControlConnection(controller), \"\", port\n)\nprint(\"setup connection on port\" + str(port))\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()\n\n```\nThe 'websockets.serve' function accepts as it's first argument an async function with parameters 'websocket' and 'path'.\n\nHere's the code for my function 'getControlConnection', which accepts my robot controller and returns the required async function: \n```\ndef getControlConnection(controller): \n    async def controlConnection(websocket, path):\n        escape = False\n        while not escape:\n            command = await websocket.recv()\n            if command == \"END\":\n                escape = True\n            else:\n                print(\"command\")\n                websocket.send(controller.giveCommand(command))\n    return controlConnection\n```\nThe returned function basically waits for a command from the websocket, and unless the command is 'END', passes that command to the robot controller and returns the response to the websocket. \n\n### Websocket connection (client)\nWe also need a frontend web page that we can use to send the control commands to the robot.\n\nFirst a little HTML with an input for the websocket uri and a connect button.\n```\n<html>\n    <script src=\"robot-client.js\"></script>\n    <body>\n        <input/>\n        <button onclick=\"start()\">Connect</button>\n    </body>\n</html>\n```\nIt won't exactly look fancy but for an MVP it should do the job!\n\nI'm thinking to use the arrow keys to control the robot so I don't need any other buttons in the HTML, instead once we click the Connect button it'll listen to the keydown and keyup events.\n\nHere's my javascript code in robot-client.js\n```\nconst start = () => {\n    url = document.querySelector('input').value\n    if (url) {\n        const websocket = new WebSocket(url)\n\n        websocket.onopen = (event) => {\n            console.log(\"websocket connected\")\n            document.addEventListener(\"keydown\",(event) => {\n                console.log(\"sending event\")\n                switch (event.key) {\n                    case \"Down\": // IE/Edge specific value\n                    case \"ArrowDown\":\n                        websocket.send(\"back\")\n                        break;\n                    case \"Up\": // IE/Edge specific value\n                    case \"ArrowUp\":\n                        websocket.send(\"forward\")\n                        break;\n                    case \"Left\": // IE/Edge specific value\n                    case \"ArrowLeft\":\n                        websocket.send(\"left\")\n                        break;\n                    case \"Right\": // IE/Edge specific value\n                    case \"ArrowRight\":\n                        websocket.send(\"right\")\n                        break;\n                }\n\n                event.preventDefault();\n            });\n\n            document.addEventListener(\"keyup\", (event) => {\n                websocket.send(\"stop\");\n                event.preventDefault();\n            });\n        }\n    }\n}\n```\nWhen the Connect button is clicked, it'll run this function. First it establishes a Websocket connection to the uri that we've typed in the input box. Then once it connects it'll start listening to the keydown and keyup events that the page receives. On keydown we send the appropriate command to the robot, and on keyup we send the stop command.\n\n## Putting it all together!\nNow we've got all the code ready we need to load it into the raspberry pi. For me the best way was to commit it and push to my github account (https://github.com/Le5tes), and then clone the code on my pi.\n\nI powered up my raspberry pi and sshed into it again with putty.\n\nThen, having set up git inital git config (see https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup), I cloned from my git repo (it's at https://github.com/Le5tes/robot.git so feel free to fork it. I'll be updating the code so I'll leave where we are here on a seperate branch 'level-1').\n\nBefore running it I also had to install the websockets module:\n```\n$ pip3 install websockets\n```\n\nThen all I had to do is run my robot.py file.\n\n![](/image-server/running-ok.bmp)\n\nNow I open my robot-client html file in a browser and enter the uri and click connect:\n\n![](/image-server/robot-client.png)\n\nAnd I can check that commands are being sent ok.\n\n![](/image-server/commands.bmp)\n\nWell it looks like there's a small bug to iron out. But it's working!\n\n## The moment of truth!\n\nI shutdown my pi again and tried connecting it back up to the robot. I reran my robot code on the pi and refreshed my client. On connecting again I was able to move my robot!\n\n<video controls width=500>\n<source src=\"/image-server/first-movements-2.mp4\" type=\"video/mp4\">\n</video>",
              "tags": "robot, robotics, raspberry pi, make, robot journey, python, websockets"
            },
            {
              "id":"234",
              "createdAt": "2021-09-26T19:13:12.000Z",
              "username": "Tim",
              "title": "Robot Body Upgrades",
              "description": "Putting my 3D printer to good use to make my robot a bit more sturdy",
              "image": "https://www.cats.org.uk/uploads/branches/231/Kit/Boba_red_sofa_small.jpg",
              "body": "# Robot Body Upgrades\nI've been thinking recently about how to make my little robot a little more sturdy. At the moment it wobbles around a lot when it moves, and it kind of falls apart when I try to put it away and get it out. \n\nAlso the wires connecting to the battery sort of fall out of the breadboard at random moments..\n\nSo the plan is to create a rather more sturdy chassis and case for the robot with my 3D Printer :)\n## The Parts:\nI'm designing these parts in [openSCAD](https://openscad.org/), a free open source CAD (Computer Aided Design) program. It's got a code interface rather than drag and drop, so it can be a bit unintuitive for people who don't like code, but it's great for coders like me! =D\n\n### The battery case\nMy idea here is to create a case which will hold the battery, with pillars onto which I can mount other components in a modular way.\n\n![](/image-server/base-compressed.jpg)\n\nI've designed it with a box shape the same size as my battery, with a point to mount a X60 connector and a point to mount a 2-way switch to use as a main power switch (at the moment I have to unplug the battery).\n\nI've also got some bolt holes to attach to my treads (it took way too long to work out exactly where those were supposed to be!) and some holes for wires from the motors.\n\n### Breadboard mount\n\n![](/image-server/breadboard-compressed.jpg)\n\nThis basically a flat platform to stick the breadboard to, with some mounting points which will slide over the columns, and also put some space between this part and the raspberry pi.\n\n### Raspberry pi mount\n\n![](/image-server/pi-layer-compressed.jpg)\n\nAnother flat platform but with some bolt holes with spacers to mount the pi (I found a schematic online to know where to place the holes :D), and plain mounting points to slide over the columns.\n\n## Trying it out\n\nHere's the printed robot assembled. I had to rewire it a bit to include the power switch (also because it kept falling apart and bits of electronics were falling out etc).\n\n![](/image-server/r1-side-compressed.JPG)\n![](/image-server/r1-back-compressed.JPG)\n\nAnd here it is running around! It's quite a lot more sturdy than the old ice cream tubs - I'm not worried about bits just falling off anymore!\n\n<video controls width=500>\n<source src=\"/image-server/r1-moving.mp4\" type=\"video/mp4\">\n</video>\n\n## Some more parts\n\nI thought to add a couple more parts to mount my pi camera. I still want to do some computer vision, and SLAM with it.\n\nI also added a little piece to mount a push button, which I'll wire up as a power button to the GPIO pins. I'd like to be able to just turn it on and off with the button rather than having to SHH into it to run the robot script, and also to shut it down.\n\n![](/image-server/r2-front-compressed.JPG)\n![](/image-server/r2-side-compressed.JPG)\n\nI think it looks rather cool now! I also have a model for a case to go over the top. But that can probably wait for a later date...\n",
              "tags": "robot, robotics, 3d printing, robot-journey, raspberry pi, CAD, make"
            }
          ]
        },
        "_description": "Description to be defined"
      }
    ],
    "/bloggs?tag={tag}": [
      {
        "_req": {},
        "_res": {
          "_body": [
            {
              "id":"1",
              "username": "Tim",
              "title": "Blog1",
              "description": "Here I start a blog",
              "image": "https://www.cats.org.uk/uploads/branches/231/Kit/Boba_red_sofa_small.jpg",
              "body": "## BLOG! \n\nThis is a mocked up blog! \n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. In hac habitasse platea dictumst vestibulum. Nullam vehicula ipsum a arcu cursus vitae congue. Blandit volutpat maecenas volutpat blandit aliquam etiam erat velit. Volutpat lacus laoreet non curabitur. Fusce ut placerat orci nulla pellentesque dignissim enim. Praesent elementum facilisis leo vel fringilla est ullamcorper. Ultrices in iaculis nunc sed augue. Tortor aliquam nulla facilisi cras fermentum. Semper viverra nam libero justo laoreet. Nulla posuere sollicitudin aliquam ultrices sagittis. Suspendisse faucibus interdum posuere lorem ipsum dolor sit amet consectetur. Dictumst quisque sagittis purus sit. Viverra aliquet eget sit amet tellus cras adipiscing. In tellus integer feugiat scelerisque varius morbi enim nunc faucibus. Pulvinar proin gravida hendrerit lectus. Elementum sagittis vitae et leo. Maecenas sed enim ut sem viverra.\n\nPurus sit amet volutpat consequat mauris nunc congue nisi. Enim tortor at auctor urna nunc id cursus metus aliquam. Nunc mattis enim ut tellus elementum sagittis vitae. Et ligula ullamcorper malesuada proin libero nunc consequat. Diam ut venenatis tellus in metus. Odio aenean sed adipiscing diam donec adipiscing tristique risus. Amet purus gravida quis blandit turpis. Integer eget aliquet nibh praesent tristique. Fermentum et sollicitudin ac orci phasellus egestas tellus rutrum tellus. Ullamcorper a lacus vestibulum sed arcu non odio euismod lacinia. Aliquam eleifend mi in nulla posuere sollicitudin aliquam.\n\nErat imperdiet sed euismod nisi porta lorem mollis aliquam ut. Pulvinar neque laoreet suspendisse interdum consectetur libero id faucibus. Tortor consequat id porta nibh venenatis cras. Porttitor eget dolor morbi non arcu risus quis. Scelerisque eu ultrices vitae auctor eu augue ut. Venenatis a condimentum vitae sapien pellentesque habitant morbi tristique senectus. Feugiat pretium nibh ipsum consequat nisl vel pretium lectus. Vel eros donec ac odio tempor orci dapibus. A pellentesque sit amet porttitor eget dolor. Eget lorem dolor sed viverra ipsum nunc aliquet bibendum enim. Purus ut faucibus pulvinar elementum integer enim neque. Bibendum enim facilisis gravida neque convallis a cras semper auctor. Consequat interdum varius sit amet mattis vulputate enim. Id volutpat lacus laoreet non curabitur. Risus nullam eget felis eget nunc lobortis mattis aliquam faucibus. Urna nunc id cursus metus aliquam eleifend mi.\n\nPosuere lorem ipsum dolor sit. Metus vulputate eu scelerisque felis imperdiet proin. Sed viverra tellus in hac habitasse. Pellentesque habitant morbi tristique senectus et netus et malesuada fames. Ac tortor dignissim convallis aenean et tortor at risus viverra. Elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at augue. Massa tincidunt nunc pulvinar sapien et ligula ullamcorper. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Nulla facilisi morbi tempus iaculis urna id volutpat lacus. Convallis posuere morbi leo urna molestie at elementum. Morbi tincidunt ornare massa eget. Arcu dui vivamus arcu felis bibendum ut tristique et egestas. Odio ut sem nulla pharetra diam. Varius vel pharetra vel turpis nunc eget lorem dolor sed. Et molestie ac feugiat sed. Nunc id cursus metus aliquam eleifend mi in nulla posuere.\n\nDignissim suspendisse in est ante. Donec adipiscing tristique risus nec feugiat in fermentum posuere urna. Ut lectus arcu bibendum at. Erat velit scelerisque in dictum. Lectus urna duis convallis convallis tellus id. Posuere sollicitudin aliquam ultrices sagittis orci a. Ullamcorper eget nulla facilisi etiam dignissim diam. Elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at augue. At tellus at urna condimentum mattis pellentesque id. Adipiscing enim eu turpis egestas pretium aenean pharetra. Libero volutpat sed cras ornare arcu dui vivamus arcu felis. Congue mauris rhoncus aenean vel. Risus feugiat in ante metus dictum at tempor.",
              "tags": "blog, blogs"
            },
            {
              "id":"2",
              "username": "Tim",
              "title": "Blog2",
              "description": "Second Blog",
              "image": "https://www.cats.org.uk/uploads/branches/231/Kit/Boba_red_sofa_small.jpg",
              "body": "## ANOTHER BLOG! \n\nThis is another mocked up blog! \n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. In hac habitasse platea dictumst vestibulum. Nullam vehicula ipsum a arcu cursus vitae congue. Blandit volutpat maecenas volutpat blandit aliquam etiam erat velit. Volutpat lacus laoreet non curabitur. Fusce ut placerat orci nulla pellentesque dignissim enim. Praesent elementum facilisis leo vel fringilla est ullamcorper. Ultrices in iaculis nunc sed augue. Tortor aliquam nulla facilisi cras fermentum. Semper viverra nam libero justo laoreet. Nulla posuere sollicitudin aliquam ultrices sagittis. Suspendisse faucibus interdum posuere lorem ipsum dolor sit amet consectetur. Dictumst quisque sagittis purus sit. Viverra aliquet eget sit amet tellus cras adipiscing. In tellus integer feugiat scelerisque varius morbi enim nunc faucibus. Pulvinar proin gravida hendrerit lectus. Elementum sagittis vitae et leo. Maecenas sed enim ut sem viverra.\n\nPurus sit amet volutpat consequat mauris nunc congue nisi. Enim tortor at auctor urna nunc id cursus metus aliquam. Nunc mattis enim ut tellus elementum sagittis vitae. Et ligula ullamcorper malesuada proin libero nunc consequat. Diam ut venenatis tellus in metus. Odio aenean sed adipiscing diam donec adipiscing tristique risus. Amet purus gravida quis blandit turpis. Integer eget aliquet nibh praesent tristique. Fermentum et sollicitudin ac orci phasellus egestas tellus rutrum tellus. Ullamcorper a lacus vestibulum sed arcu non odio euismod lacinia. Aliquam eleifend mi in nulla posuere sollicitudin aliquam.\n\nErat imperdiet sed euismod nisi porta lorem mollis aliquam ut. Pulvinar neque laoreet suspendisse interdum consectetur libero id faucibus. Tortor consequat id porta nibh venenatis cras. Porttitor eget dolor morbi non arcu risus quis. Scelerisque eu ultrices vitae auctor eu augue ut. Venenatis a condimentum vitae sapien pellentesque habitant morbi tristique senectus. Feugiat pretium nibh ipsum consequat nisl vel pretium lectus. Vel eros donec ac odio tempor orci dapibus. A pellentesque sit amet porttitor eget dolor. Eget lorem dolor sed viverra ipsum nunc aliquet bibendum enim. Purus ut faucibus pulvinar elementum integer enim neque. Bibendum enim facilisis gravida neque convallis a cras semper auctor. Consequat interdum varius sit amet mattis vulputate enim. Id volutpat lacus laoreet non curabitur. Risus nullam eget felis eget nunc lobortis mattis aliquam faucibus. Urna nunc id cursus metus aliquam eleifend mi.\n\nPosuere lorem ipsum dolor sit. Metus vulputate eu scelerisque felis imperdiet proin. Sed viverra tellus in hac habitasse. Pellentesque habitant morbi tristique senectus et netus et malesuada fames. Ac tortor dignissim convallis aenean et tortor at risus viverra. Elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at augue. Massa tincidunt nunc pulvinar sapien et ligula ullamcorper. Sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar. Nulla facilisi morbi tempus iaculis urna id volutpat lacus. Convallis posuere morbi leo urna molestie at elementum. Morbi tincidunt ornare massa eget. Arcu dui vivamus arcu felis bibendum ut tristique et egestas. Odio ut sem nulla pharetra diam. Varius vel pharetra vel turpis nunc eget lorem dolor sed. Et molestie ac feugiat sed. Nunc id cursus metus aliquam eleifend mi in nulla posuere.\n\nDignissim suspendisse in est ante. Donec adipiscing tristique risus nec feugiat in fermentum posuere urna. Ut lectus arcu bibendum at. Erat velit scelerisque in dictum. Lectus urna duis convallis convallis tellus id. Posuere sollicitudin aliquam ultrices sagittis orci a. Ullamcorper eget nulla facilisi etiam dignissim diam. Elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at augue. At tellus at urna condimentum mattis pellentesque id. Adipiscing enim eu turpis egestas pretium aenean pharetra. Libero volutpat sed cras ornare arcu dui vivamus arcu felis. Congue mauris rhoncus aenean vel. Risus feugiat in ante metus dictum at tempor.",
              "tags": "blog, blogs"
            }
          ]
        },
        "_description": "Description to be defined"
      }
    ],
    "/bloggs/123": [{
      "_req": {},
      "_res": {
        "_body": 
          {
            "id":"123",
            "createdAt": "2021-06-04T15:32:31.000Z",
            "username": "Tim",
            "title": "Starting a robot journey",
            "description": "I run through how I've started making my own robot with a Raspberry Pi.",
            "image": "/assets/robot-blog-1.svg",
            "body": "# Starting a robot journey\n\nI have been wanting to build my own robot for a long time. \n\nOf course I have, I'm an engineer!\n\nIt'll be awesome! Maybe it'll have legs and be able to run around and climb on things and avoid obstacles and squeeze through small gaps and.. and I can make it do things like tidy up the house and pick up litter outside and it'll play with my cat and I won't have to charge it because it'll come back and charge itself and.. and...\n\nWoah! Maybe I'm getting ahead of myself a bit!\n\n## Things we'll need\nOk so first things first. I had an old raspberry pi, so I've bought myself a few bits and bobs to make it into a robot.\n\n### Mk1 parts list:\n - Raspberry pi (Mines a Raspberry pi 3)\n - Raspberry pi camera (We're going to be doing computer vision at some point right? :D :D :D )\n - A basic chassis with two 12v motors and some [treads](/image-server/Treads-compressed.JPG) (Wheels are boring. Give it treads! Give it treads!) (Legs can be on a later model)\n - Breadboard and wires\n - Buck converter (Raspberry pi runs on 5V, my motors prefer 12V)\n - L293D motor controller IC\n - A 3 cell lipo battery (mine is one from a remote control plane I built a few years ago)\n\nHere are my main electronics parts:\n\n<img alt=\"electronics\" src=\"/image-server/electronics-compressed.JPG\" width=200>\n<img alt=\"wires\" src=\"/image-server/wires-compressed.JPG\" width=200>\n<img alt=\"battery\" src=\"/image-server/battery-compressed.JPG\" width=200>\n\nOh and we'll need some tools as well!\n\n### Tools\n - Soldering iron and solder\n - Various screwdrivers\n - Multimeter\n - wire cutters/strippers\n\n![tools](/image-server/tools-compressed.JPG)\n\n## Assembly\nNow to assemble the robot. \n\nFirst I wired up my buck converter across the power rails of my breadboard so that one side could be the battery voltage (approx 11.4V) and the other side would be 5V. This involved soldering some wires to the connectors of my buck converter so that I could plug it into the breadboard. Since my buck converter doesn't have any sort of display I had to use a multimeter to calibrate it to 5V. (You'll need to connect up the battery to do this. Once you've calibrated the buck converter, best disconnect the battery again.)\nI made a connection across the board between the two neutral rails so that there's a common ground. \n\nNext I plugged in the motor controller and started wiring it up.\n\nHere's a diagram showing the pins of the motor controller IC:\n\n![](/image-server/L293D-Ic-Pinout.jpg)\n\nWe'll connect Vcc 1 to our 5V rails and Vcc 2 to the battery voltage, and we will connect all the ground pins to our common ground. We also need to connect both the \"enable\" pins to 5V to enable all the controllers.\n\nWe'll be connecting the 4 input pins to the GPIO pins on the raspberry pi, and the 4 output pins to our motors.\n\nAfter wiring up the Vcc, ground and enable pins as above, I came to attach the motors.\n\nAt this point I realised that I needed to upgrade my chassis a bit so that I could mount all the different parts to it. So I spent a little while fashoning something out of some old ice-cream tubs! So now I have a chassis with three layers to mount my raspberry pi, breadboard and battery onto. I also cut a little mount for the rasberry pi camera, though that won't be wired up quite yet.\n\nI soldered some wires onto the two motors and wired them up to the motor controller outputs. \nFinally I wired up the raspberry pi gpio pins to the 5V rails and the motor controller inputs.\n\nFor the raspberry pi GPIO pins, pins 2 and 4 are +V so they are wired to the 5V rail, and pins 6 and 9 are -V so they are wired to the ground. I'm using pins 11,12,13 and 15 to control the motors.\n\nIf you're trying this at home, be super careful with the raspberry pi pins. If you accidentally wire one of the pins to the 11.4V rails you'll fry the raspberry pi! Raspberry pis are very sensitive so you need to make sure it get exactly 5V, even 5.1V could damage it.\n\nHere's a circuit diagram:\n\n<img src=\"/image-server/circuit-diagram.png\" alt=\"circuit diagram\" width=\"500\">\n\nWith all this complete I mounted all the parts on my makeshift chassis.\n\nAnd here's the MK1 robot!! \n\n![robot mk1](/image-server/robot-mk1.jpg)\n\nBut it doesn't do anything yet! Next I'll start building it a brain!",
            "tags": "robot, robotics, raspberry pi, make, robot journey, electronics"
          }
        }
      }
    ]
  }
}
